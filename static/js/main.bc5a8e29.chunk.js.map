{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","left","right","partitionIndex","pivot","swappedVal","partiton","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","endIndex","bubbleSortHelper","getBubbleSortAnimations","console","log","className","onClick","mergeSort","bubbleSort","quickSort","radixSort","map","value","index","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc5a8e29.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, left, right, animations) {\r\n  if (left < right) {\r\n    let partitionIndex = partiton(array, left, right, animations);\r\n    quickSortHelper(array, left, partitionIndex - 1, animations);\r\n    quickSortHelper(array, partitionIndex + 1, right, animations);\r\n  }\r\n}\r\n\r\nfunction partiton(array, left, right, animations) {\r\n  let pivot = array[right];\r\n  let i = left - 1;\r\n\r\n  for (let j = left; j < right; j++) {\r\n    animations.push([j, right]);\r\n    animations.push([j, right]);\r\n    if (array[j] <= pivot) {\r\n      i++;\r\n\r\n      let swappedVal = array[i];\r\n      animations.push([i, array[j]]);\r\n      array[i] = array[j];\r\n      animations.push([j, swappedVal]);\r\n      array[j] = swappedVal;\r\n    } else {\r\n      animations.push([j, array[j]]);\r\n      animations.push([j, array[j]]);\r\n    }\r\n    // exit for loop check for pivot animation\r\n    if (j !== right - 1) {\r\n      animations.push([j, array[j]]);\r\n      animations.push([j, array[j]]);\r\n    }\r\n  }\r\n\r\n  // swap the pivot\r\n  let swappedVal = array[i + 1];\r\n  animations.push([i + 1, array[right]]);\r\n  array[i + 1] = array[right];\r\n  animations.push([right, swappedVal]);\r\n  array[right] = swappedVal;\r\n\r\n  return i + 1;\r\n}\r\n","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/MergeSort.js\";\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/BubbleSort.js\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/QuickSort.js\";\r\n//import { getRadixSortAnimations } from \"../SortingAlgorithms/RadixSort.js\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 2;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"lightcoral\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"blue\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntfromRange(10, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 4 !== 2 && i % 4 !== 3;\r\n      if (isColorChange) {\r\n        //updating compare color\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        // swapping\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\r\n      if (isColorChange) {\r\n        console.log(animations[i]);\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  radixSort() {\r\n    //const animations = getRadixSortAnimations(this.state.array);\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"tool-bar\">\r\n          <button onClick={() => this.resetArray()}>Create New Array</button>\r\n          <button onClick={() => this.mergeSort()}>MergeSort</button>\r\n          <button onClick={() => this.bubbleSort()}>BubbleSort</button>\r\n          <button onClick={() => this.quickSort()}>QuickSort</button>\r\n          <button onClick={() => this.radixSort()}>RadixSort</button>\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={index}\r\n              style={{ height: `${value}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\nfunction randomIntfromRange(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  //const auxiliaryArray = array.slice();\r\n  bubbleSortHelper(array, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, endIndex, animations) {\r\n  for (let i = 0; i < endIndex; i++) {\r\n    for (let j = 0; j < endIndex - i; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      // swap array[j+1] with arr[i+1] if adjacent is larger\r\n      if (array[j] > array[j + 1]) {\r\n        let swappedVal = array[j];\r\n\r\n        animations.push([j, array[j + 1]]);\r\n        array[j] = array[j + 1];\r\n        animations.push([j + 1, swappedVal]);\r\n        array[j + 1] = swappedVal;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>woof</SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}